                               Commit Style Guide

SUMMARY

  <type> [optional scope]: <description>

  [optional body] 

  [optional footer(s)]

DESCRIPTION

  <type>

    - BREAKING CHANGE: in the footer or appends ! to the type introduces a
      breaking API change (correlates with MAJOR) in semantic versioning.
    - feat: a new feature (correlates with MINOR in semantic versioning).
    - fix: a bug fix (correlates with PATCH in semantic versioning).

    - build: changes to build systems or external deps.
    - ci: changes to the CI configuration.
    - docs: documentation related changes.
    - perf: a code change that improves performance.
    - refactor: a code change that neither fixes a bug nor adds a feature.
    - style: changes that do not affect the meaning of the code i.e. linting.
    - test: changes to tests.

  [scope]

    - Generally the name of the package affected.

  <description>

    - Summarise changes in 50 characters or less. 
    - Use imperative, present tense e.g. "change" not "changed" or "changes".
    - Do not capitalise the subject line or use a period at the end.

  <body>

    - Body should be wrapped at 72 characters.
    - Use imperative, present tense just as in the subject line.
    - Answer:
      • Why are you making the change?
      • How does it address the issue? This part can be left out if the
        code is self-explanatory.
      • What side effects does this change have?

  <footer>

    - Breaking changes should start with "BREAKING CHANGE:" followed by a 
      summary of the breaking change, blank line, and a detailed description of 
      the breaking change that also includes migration instructions.
    - Similarly a deprecation should start with "DEPRECATED:" followed by a
      short description of what is deprecated, a blank line, and a detailed
      description of the deprecation that also mentions the recommended update
      path.
    - This is also the place to reference GitHub issues using one of the 
      following keywords: close, fix, resolve. Use full URLs for references.

REVERT

  - Begin with revert:, followed by the heading of the reverted commit.
  - The body should start with "This reverts commit <hash>".
  - A clear description of the reason for reverting the commit message.

REFERENCES

  - https://www.conventionalcommits.org/
  - https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit
  - https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/using-keywords-in-issues-and-pull-requests

                                26 JANUARY 2022
